import pymysql
import config

# conn = None

def establish_dbConnection(database_name = None):
	global conn
	if database_name is None:
		connection = pymysql.connect(host = config.db_host, user = config.db_username, passwd = config.db_password)
	else:
		connection = pymysql.connect(host = config.db_host, user = config.db_username, passwd = config.db_password, database= database_name)
	
	if connection.open:
		conn = connection
		return True
	else:
		return None



def check_datatable_exists(table_name):
	if establish_dbConnection('fileProcessor'):
		cur= conn.cursor()
		cur.execute("SELECT * FROM INFORMATION_SCHEMA.tables where table_name = '{}';".format(table_name))

		if cur.fetchone()[0] == 1:
			cur.close()
			return True

	cur.close()
	return False


def create_database():
	print(conn)
	if establish_dbConnection():
		cur = conn.cursor()
		try:
			cur.execute("CREATE DATABASE IF NOT EXISTS fileProcessor;")
			return True
		except:
			print("Error while create database 'fileProcessor'")
			return False
		finally:
			cur.close()
			conn.close()

def create_file_processing_history_table():
	if establish_dbConnection('fileProcessor'):
		cur = conn.cursor()
		try:
			# add the first row of each file into different columns mentioned in the sampe excel file.
			# make datetime of length 6
			cur.execute("CREATE TABLE IF NOT EXISTS fileProcessed_historyLogs (filename VARCHAR(255), rowcount int, ftpserver VARCHAR(100), dateprocessed DATETIME DEFAULT CURRENT_TIMESTAMP);")
			return True
		except:
			print("Error while create table 'fileProcessed_historyLogs'")
			return False
		finally:
			cur.close()
			conn.close()


def check_file_already_processed(file, row_count):
	if establish_dbConnection('fileProcessor'):
		cur = conn.cursor()
		try:
			# check based on the newly added column as well just to make sure whether the file
			cur.execute("SELECT COUNT(*) FROM fileProcessed_historyLogs WHERE filename = '{}' and rowcount = {}".format(file,row_count))
			myresult = cur.fetchone()[0]
			if (myresult == 1):
				return True
			else:
				return False
		except:
			print("Error while executing query in 'check_file_already_processed' method")
		finally:
			cur.close()
			conn.close()


def create_Main_file_Detail_Table():
	if establish_dbConnection('fileProcessor'):
		flag = False
		cur = conn.cursor()
		try:
			# cur.execute("CREATE TABLE IF NOT EXISTS filedetails (NPROD CHAR(6), LIBLONG CHAR(50), PPTTC bigint(12), EAN13 CHAR(13), RGEDIT_IF CHAR(4), EDITR_IF CHAR(4), SECTED_IF CHAR(4), CATPROD_IF CHAR(4), NPRODINT CHAR(13), AUTEUR CHAR(22), TYPPERIODE CHAR(1), ANNEE CHAR(4), MOIS CHAR(2), JOUR CHAR(2), TYPCOMPO CHAR(1), NBOITE CHAR(6), MVTENTREES CHAR(11), MVTRETOURS CHAR(11), MVTVTENVTES CHAR(11), MVTVTEREASS CHAR(11), MVTEDITEURS CHAR(11), MVTSERVPRES CHAR(11), MVTPILON CHAR(11), MVTPILONRET CHAR(11), MVTINVENT CHAR(11), MVTAJUST CHAR(11), MVTTRANSFR CHAR(11), MVTRECONDIT CHAR(11), MVTVTEDIR CHAR(11), STDISPOCENTR CHAR(11), STECARTCENTR CHAR(11), STRETCENTR CHAR(11), STRESCENTR CHAR(11), STDEFCENTR CHAR(11), STPILCENTR CHAR(11), STRENOVCENTR CHAR(11), STNDISPOCENTR CHAR(11), STCOMPTOIR CHAR(11), STPROVINCE CHAR(11), STETRANGER CHAR(11), STCONSIGN CHAR(11), NPROD2 CHAR(9), NBOITE2 CHAR(9));")
			cur.execute("CREATE TABLE IF NOT EXISTS filedetails_360 (NPROD CHAR(6), LIBLONG CHAR(50), PPTTC bigint(12), EAN13 CHAR(13), RGEDIT_IF CHAR(4), EDITR_IF CHAR(4), SECTED_IF CHAR(4), CATPROD_IF CHAR(4), NPRODINT CHAR(13), AUTEUR CHAR(22), TYPPERIODE CHAR(1), ANNEE CHAR(4), MOIS CHAR(2), JOUR CHAR(2), TYPCOMPO CHAR(1), NBOITE CHAR(6), MVTENTREES CHAR(11), MVTRETOURS CHAR(11), MVTVTENVTES CHAR(11), MVTVTEREASS CHAR(11), MVTEDITEURS CHAR(11), MVTSERVPRES CHAR(11), MVTPILON CHAR(11), MVTPILONRET CHAR(11), MVTINVENT CHAR(11), MVTAJUST CHAR(11), MVTTRANSFR CHAR(11), MVTRECONDIT CHAR(11), MVTVTEDIR CHAR(11),MAL_MVTENTREES CHAR(11), MAL_MVTRETOURS CHAR(11), MAL_MVTVTENVTES CHAR(11), MAL_MVTVTEREASS CHAR(11), MAL_MVTEDITEURS CHAR(11), MAL_MVTSERVPRES CHAR(11), MAL_MVTPILON CHAR(11), MAL_MVTPILON_RET CHAR(11), MAL_MVTINVENT CHAR(11), MAL_MVTAJUST CHAR(11), MAL_MVTTRANSFR CHAR(11), MAL_MVTRECONDIT CHAR(11), MAL_MVTVTEDIR CHAR(11), COMP_MVTENTREES CHAR(11), COMP_MVTRETOURS CHAR(11), COMP_MVTVTENVTES CHAR(11), COMP_MVTVTEREASS CHAR(11), COMP_MVTEDITEURS CHAR(11), COMP_MVTSERVPRES CHAR(11), COMP_MVTPILON CHAR(11), COMP_MVTPILON_RET CHAR(11), COMP_MVTINVENT CHAR(11), COMP_MVTAJUST CHAR(11), COMP_MVTTRANSFR CHAR(11), COMP_MVTRECONDIT CHAR(11), COMP_MVTVTEDIR CHAR(11), PRO_MVTENTREES CHAR(11), PRO_MVTRETOURS CHAR(11), PRO_MVTVTENVTES CHAR(11), PRO_MVTVTEREASS CHAR(11), PRO_MVTEDITEURS CHAR(11), PRO_MVTSERVPRES CHAR(11), PRO_MVTPILON CHAR(11), PRO_MVTPILON_RET CHAR(11), PRO_MVTINVENT CHAR(11), PRO_MVTAJUST CHAR(11), PRO_MVTTRANSFR CHAR(11), PRO_MVTRECONDIT CHAR(11), PRO_MVTVTEDIR CHAR(11), EXP_MVTENTREES CHAR(11), EXP_MVTRETOURS CHAR(11), EXP_MVTVTENVTES CHAR(11), EXP_MVTVTEREASS CHAR(11), EXP_MVTEDITEURS CHAR(11), EXP_MVTSERVPRES CHAR(11), EXP_MVTPILON CHAR(11), EXP_MVTPILON_RET CHAR(11), EXP_MVTINVENT CHAR(11), EXP_MVTAJUST CHAR(11), EXP_MVTTRANSFR CHAR(11), EXP_MVTRECONDIT CHAR(11), EXP_MVTVTEDIR CHAR(11), CONS_MVTENTREES CHAR(11), CONS_MVTRETOURS CHAR(11), CONS_MVTVTENVTES CHAR(11), CONS_MVTVTEREASS CHAR(11), CONS_MVTEDITEURS CHAR(11), CONS_MVTSERVPRES CHAR(11), CONS_MVTPILON CHAR(11), CONS_MVTPILON_RET CHAR(11), CONS_MVTINVENT CHAR(11), CONS_MVTAJUST CHAR(11), CONS_MVTTRANSFR CHAR(11), CONS_MVTRECONDIT CHAR(11), CONS_MVTVTEDIR CHAR(11), STDISPOCENTR CHAR(11), STECARTCENTR CHAR(11), STRETCENTR CHAR(11), STRESCENTR CHAR(11), STDEFCENTR CHAR(11), STPILCENTR CHAR(11), STRENOVCENTR CHAR(11), STNDISPOCENTR CHAR(11), STCOMPTOIR CHAR(11), STPROVINCE CHAR(11), STETRANGER CHAR(11), STCONSIGN CHAR(11), NPROD2 CHAR(9), NBOITE2 CHAR(9));")
			flag = True
		except:
			print("Error while creating table in 'create_Main_file_Detail_Table' method")
			flag = False
		finally:
			cur.close()
			conn.close()
	return flag

def built_insert_query(insert_value_string):
	if establish_dbConnection('fileProcessor'):
		cur = conn.cursor()
		try:
			print(f'INSERT INTO filedetails_360 (NPROD, LIBLONG, PPTTC, EAN13, RGEDIT_IF, EDITR_IF, SECTED_IF, CATPROD_IF, NPRODINT, AUTEUR, TYPPERIODE, ANNEE, MOIS, JOUR, TYPCOMPO, NBOITE, MVTENTREES , MVTRETOURS , MVTVTENVTES , MVTVTEREASS , MVTEDITEURS , MVTSERVPRES , MVTPILON , MVTPILONRET , MVTINVENT , MVTAJUST , MVTTRANSFR , MVTRECONDIT , MVTVTEDIR ,MAL_MVTENTREES , MAL_MVTRETOURS , MAL_MVTVTENVTES , MAL_MVTVTEREASS , MAL_MVTEDITEURS , MAL_MVTSERVPRES , MAL_MVTPILON , MAL_MVTPILON_RET , MAL_MVTINVENT , MAL_MVTAJUST , MAL_MVTTRANSFR , MAL_MVTRECONDIT , MAL_MVTVTEDIR , COMP_MVTENTREES , COMP_MVTRETOURS , COMP_MVTVTENVTES , COMP_MVTVTEREASS , COMP_MVTEDITEURS , COMP_MVTSERVPRES , COMP_MVTPILON , COMP_MVTPILON_RET , COMP_MVTINVENT , COMP_MVTAJUST , COMP_MVTTRANSFR , COMP_MVTRECONDIT , COMP_MVTVTEDIR , PRO_MVTENTREES , PRO_MVTRETOURS , PRO_MVTVTENVTES , PRO_MVTVTEREASS , PRO_MVTEDITEURS , PRO_MVTSERVPRES , PRO_MVTPILON , PRO_MVTPILON_RET , PRO_MVTINVENT , PRO_MVTAJUST , PRO_MVTTRANSFR , PRO_MVTRECONDIT , PRO_MVTVTEDIR , EXP_MVTENTREES , EXP_MVTRETOURS, EXP_MVTVTENVTES , EXP_MVTVTEREASS , EXP_MVTEDITEURS , EXP_MVTSERVPRES , EXP_MVTPILON , EXP_MVTPILON_RET , EXP_MVTINVENT , EXP_MVTAJUST , EXP_MVTTRANSFR , EXP_MVTRECONDIT , EXP_MVTVTEDIR , CONS_MVTENTREES , CONS_MVTRETOURS , CONS_MVTVTENVTES , CONS_MVTVTEREASS , CONS_MVTEDITEURS , CONS_MVTSERVPRES , CONS_MVTPILON , CONS_MVTPILON_RET , CONS_MVTINVENT , CONS_MVTAJUST , CONS_MVTTRANSFR , CONS_MVTRECONDIT , CONS_MVTVTEDIR , STDISPOCENTR , STECARTCENTR , STRETCENTR , STRESCENTR , STDEFCENTR , STPILCENTR , STRENOVCENTR , STNDISPOCENTR , STCOMPTOIR , STPROVINCE , STETRANGER , STCONSIGN , NPROD2 , NBOITE2) VALUES {insert_value_string}')
			cur.execute(f'INSERT INTO filedetails_360 (NPROD, LIBLONG, PPTTC, EAN13, RGEDIT_IF, EDITR_IF, SECTED_IF, CATPROD_IF, NPRODINT, AUTEUR, TYPPERIODE, ANNEE, MOIS, JOUR, TYPCOMPO, NBOITE, MVTENTREES , MVTRETOURS , MVTVTENVTES , MVTVTEREASS , MVTEDITEURS , MVTSERVPRES , MVTPILON , MVTPILONRET , MVTINVENT , MVTAJUST , MVTTRANSFR , MVTRECONDIT , MVTVTEDIR ,MAL_MVTENTREES , MAL_MVTRETOURS , MAL_MVTVTENVTES , MAL_MVTVTEREASS , MAL_MVTEDITEURS , MAL_MVTSERVPRES , MAL_MVTPILON , MAL_MVTPILON_RET , MAL_MVTINVENT , MAL_MVTAJUST , MAL_MVTTRANSFR , MAL_MVTRECONDIT , MAL_MVTVTEDIR , COMP_MVTENTREES , COMP_MVTRETOURS , COMP_MVTVTENVTES , COMP_MVTVTEREASS , COMP_MVTEDITEURS , COMP_MVTSERVPRES , COMP_MVTPILON , COMP_MVTPILON_RET , COMP_MVTINVENT , COMP_MVTAJUST , COMP_MVTTRANSFR , COMP_MVTRECONDIT , COMP_MVTVTEDIR , PRO_MVTENTREES , PRO_MVTRETOURS , PRO_MVTVTENVTES , PRO_MVTVTEREASS , PRO_MVTEDITEURS , PRO_MVTSERVPRES , PRO_MVTPILON , PRO_MVTPILON_RET , PRO_MVTINVENT , PRO_MVTAJUST , PRO_MVTTRANSFR , PRO_MVTRECONDIT , PRO_MVTVTEDIR , EXP_MVTENTREES , EXP_MVTRETOURS, EXP_MVTVTENVTES , EXP_MVTVTEREASS , EXP_MVTEDITEURS , EXP_MVTSERVPRES , EXP_MVTPILON , EXP_MVTPILON_RET , EXP_MVTINVENT , EXP_MVTAJUST , EXP_MVTTRANSFR , EXP_MVTRECONDIT , EXP_MVTVTEDIR , CONS_MVTENTREES , CONS_MVTRETOURS , CONS_MVTVTENVTES , CONS_MVTVTEREASS , CONS_MVTEDITEURS , CONS_MVTSERVPRES , CONS_MVTPILON , CONS_MVTPILON_RET , CONS_MVTINVENT , CONS_MVTAJUST , CONS_MVTTRANSFR , CONS_MVTRECONDIT , CONS_MVTVTEDIR , STDISPOCENTR , STECARTCENTR , STRETCENTR , STRESCENTR , STDEFCENTR , STPILCENTR , STRENOVCENTR , STNDISPOCENTR , STCOMPTOIR , STPROVINCE , STETRANGER , STCONSIGN , NPROD2 , NBOITE2) VALUES {insert_value_string}')
			# print(f'INSERT INTO filedetails (NPROD, LIBLONG, PPTTC, EAN13, RGEDIT_IF, EDITR_IF, SECTED_IF, CATPROD_IF, NPRODINT, AUTEUR, TYPPERIODE, ANNEE, MOIS, JOUR, TYPCOMPO, NBOITE, MVTENTREES, MVTRETOURS, MVTVTENVTES, MVTVTEREASS, MVTEDITEURS, MVTSERVPRES, MVTPILON, MVTPILONRET, MVTINVENT, MVTAJUST, MVTTRANSFR, MVTRECONDIT, MVTVTEDIR, STDISPOCENTR, STECARTCENTR, STRETCENTR, STRESCENTR, STDEFCENTR, STPILCENTR, STRENOVCENTR, STNDISPOCENTR, STCOMPTOIR, STPROVINCE, STETRANGER, STCONSIGN, NPROD2, NBOITE2) VALUES {insert_value_string}')
			# cur.execute(f'INSERT INTO filedetails (NPROD, LIBLONG, PPTTC, EAN13, RGEDIT_IF, EDITR_IF, SECTED_IF, CATPROD_IF, NPRODINT, AUTEUR, TYPPERIODE, ANNEE, MOIS, JOUR, TYPCOMPO, NBOITE, MVTENTREES, MVTRETOURS, MVTVTENVTES, MVTVTEREASS, MVTEDITEURS, MVTSERVPRES, MVTPILON, MVTPILONRET, MVTINVENT, MVTAJUST, MVTTRANSFR, MVTRECONDIT, MVTVTEDIR, STDISPOCENTR, STECARTCENTR, STRETCENTR, STRESCENTR, STDEFCENTR, STPILCENTR, STRENOVCENTR, STNDISPOCENTR, STCOMPTOIR, STPROVINCE, STETRANGER, STCONSIGN, NPROD2, NBOITE2) VALUES {insert_value_string}')
			conn.commit()
			return True
		except:
			print("Error while inserting values in method 'built_insert_query', Please check the input file.")
			return False
		finally:
			cur.close()
			conn.close()

def add_processed_file_entry_to_db(filename, row_count, ftp_host):
	if establish_dbConnection('fileProcessor'):
		cur = conn.cursor()
		try:
			# print(f'INSERT INTO fileprocessed_historylogs () VALUES {insert_value_string}')
			cur.execute("INSERT INTO fileprocessed_historylogs (filename, rowcount, ftpserver) VALUES ('{}', {}, '{}')".format(filename,row_count,ftp_host))
			conn.commit()
			return True
		except:
			print("Error while inserting values in method 'add_processed_file_entry_to_db'")
			return False
		finally:
			cur.close()
			conn.close()



establish_dbConnection()